{"version":3,"sources":["UxListItem.js","App.js","serviceWorker.js","index.js"],"names":["UxListItem","props","state","paths","path","tag","itemPathsShow","handleItem","setState","handleFouce","item","chrome","runtime","sendMessage","id","type","to","focus","tagName","operationId","this","className","onClick","name","size","bordered","dataSource","renderItem","Item","bind","summary","Component","App","tags","onMessage","addListener","json","url","tagIndexMap","map","index","allPaths","mInfo","pathInfo","push","iframeScriptLoaded","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iTA0DeA,G,mBArDb,WAAYC,GAAQ,IAAD,8BACjB,+CASFC,MAAQ,CACNC,MAAO,CAAC,CAACC,KAAM,YAAa,CAACA,KAAM,YAAa,CAACA,KAAM,aACvDC,IAAK,GACLC,eAAe,GAbE,EAgBnBC,WAAa,WACX,EAAKC,SAAS,CACZF,eAAgB,EAAKJ,MAAMI,iBAlBZ,EAsBnBG,YAAc,SAACC,GACbC,OAAOC,QAAQC,YAAYF,OAAOC,QAAQE,GAAI,CAC5CC,KAAM,kBACNC,GAAI,aACJC,OAAO,EACPC,QAASR,EAAKQ,QACdC,YAAaT,EAAKS,eA5BH,E,iFAKjBC,KAAKZ,SAAS,CACZH,IAAKe,KAAKnB,MAAMI,Q,+BA0BV,IAAD,OACP,OACE,yBAAKgB,UAAU,cACb,yBAAKA,UAAU,YAAYC,QAASF,KAAKb,YAAaa,KAAKlB,MAAMG,IAAIkB,MACrE,kBAAC,IAAD,CACEF,UAAWD,KAAKlB,MAAMI,cAAgB,GAAK,0BAC3CkB,KAAK,QACLC,SAAS,WACTC,WAAYN,KAAKlB,MAAMG,IAAIF,MAC3BwB,WACE,SAAAjB,GAAI,OACJ,kBAAC,IAAKkB,KAAN,CAAWP,UAAU,oBAAoBC,QAAS,EAAKb,YAAYoB,KAAK,EAAMnB,IAC3EA,EAAKN,KADR,eACgCM,EAAKoB,iB,GA7CxBC,cC6EVC,E,YAzEb,aAAe,IAAD,8BACZ,+CAmDF9B,MAAQ,CACN+B,KAAM,GACN9B,MAAO,IApDJQ,QACDA,OAAOC,QAAQsB,UAAUC,aAAY,YAA4B,IAA1BpB,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,GAASoB,GAAU,EAAfC,IAAe,EAAVD,MACpD,GAAa,oBAATrB,GAAqC,WAAPC,EAAiB,CAEjD,IAAIsB,EAAc,GAClBF,EAAKH,KAAKM,KAAI,SAAClC,EAAKmC,GAClBnC,EAAIF,MAAQ,GACZmC,EAAYjC,EAAIkB,MAAQiB,KAE1B,IAAIC,EAAWL,EAAKjC,MACpB,IAAK,IAAIC,KAAQqC,EACf,IAAI,IAAIC,KAASD,EAASrC,GAAM,CAC9B,IAAIc,EAAUuB,EAASrC,GAAMsC,GAAOT,KAAK,GACrCO,EAAQF,EAAYpB,GAEpByB,EAAWF,EAASrC,GAAMsC,GAC9BC,EAASvC,KAAOA,EAChBuC,EAASzB,QAAUA,EACnBkB,EAAKH,KAAKO,GAAOrC,MAAMyC,KAAKD,GAIhC,EAAKnC,SAAS,CAACyB,KAAMG,EAAKH,KAAM9B,MAAOiC,EAAKjC,YAKhDQ,OAAOC,QAAQC,YAAYF,OAAOC,QAAQE,GAAI,CAC5CC,KAAM,kBACNC,GAAI,aACJ6B,oBAAoB,KAGtB,EAAKrC,SAAS,CACZyB,KAAM,CACJ,CACEV,KAAM,MACNpB,MAAM,CACJ,CAACC,KAAM,YACP,CAACA,KAAM,YACP,CAACA,KAAM,cAGX,CAACmB,KAAM,OACP,CAACA,KAAM,OAAO,CAACA,KAAM,OAAO,CAACA,KAAM,OAAO,CAACA,KAAM,UA9C3C,E,sEA0DZ,OACE,yBAAKF,UAAU,OACb,kBAAC,IAAD,CACEG,KAAK,QACLC,SAAS,WACTC,WAAYN,KAAKlB,MAAM+B,KACvBN,WAAY,SAAAjB,GAAI,OACd,kBAAC,EAAD,CAAYL,IAAKK,Y,GAlEXqB,aCKEe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b920a72c.chunk.js","sourcesContent":["/*global chrome*/\nimport React, {Component} from \"react\";\nimport {List, Typography} from \"antd\";\n\nclass UxListItem extends Component {\n  constructor(props) {\n    super();\n  }\n\n  componentDidMount() {\n    this.setState({\n      tag: this.props.tag\n    });\n  }\n\n  state = {\n    paths: [{path: \"/aaa/bbb\"}, {path: \"/aaa/bbb\"}, {path: \"/aaa/bbb\"}],\n    tag: {},\n    itemPathsShow: false\n  };\n\n  handleItem = () => {\n    this.setState({\n      itemPathsShow: !this.state.itemPathsShow\n    });\n  };\n\n  handleFouce = (item) => {\n    chrome.runtime.sendMessage(chrome.runtime.id, {\n      type: \"ajaxInterceptor\",\n      to: \"background\",\n      focus: true,\n      tagName: item.tagName,\n      operationId: item.operationId\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"UxListItem\">\n        <div className=\"item-name\" onClick={this.handleItem}>{this.state.tag.name}</div>\n        <List\n          className={this.state.itemPathsShow ? \"\" : \"ux-list-item-paths-hide\"}\n          size=\"small\"\n          bordered=\"bordered\"\n          dataSource={this.state.tag.paths}\n          renderItem={\n            item =>\n            <List.Item className=\"ux-list-item-path\" onClick={this.handleFouce.bind(this, item)}>\n              {item.path}&nbsp;&nbsp;&nbsp;{item.summary}\n            </List.Item>\n          }\n        />\n      </div>\n    );\n  }\n}\n\nexport default UxListItem;\n","/*global chrome*/\nimport React, {Component} from \"react\";\nimport Button from \"antd/es/button\";\nimport {List, Typography} from \"antd\";\nimport \"./App.css\";\nimport UxListItem from \"./UxListItem\"\n\nclass App extends Component {\n  constructor() {\n    super();\n    if(chrome){\n      chrome.runtime.onMessage.addListener(({type, to, url, json}) => {\n        if (type === \"ajaxInterceptor\" && to === \"iframe\") {\n          // 处理\n          let tagIndexMap = {};\n          json.tags.map((tag, index) => {\n            tag.paths = [];\n            tagIndexMap[tag.name] = index\n          });\n          let allPaths = json.paths;\n          for (let path in allPaths) {\n            for(let mInfo in allPaths[path]){\n              let tagName = allPaths[path][mInfo].tags[0];\n              let index = tagIndexMap[tagName];\n              // 将路径信息加入到对象中\n              let pathInfo = allPaths[path][mInfo];\n              pathInfo.path = path;\n              pathInfo.tagName = tagName;\n              json.tags[index].paths.push(pathInfo);\n            }\n          }\n          // 保存到state\n          this.setState({tags: json.tags, paths: json.paths});\n        }\n      });\n\n      // 先发到bg\n      chrome.runtime.sendMessage(chrome.runtime.id, {\n        type: \"ajaxInterceptor\",\n        to: \"background\",\n        iframeScriptLoaded: true\n      });\n    }else{\n      this.setState({\n        tags: [\n          {\n            name: 'aaa',\n            paths:[\n              {path: '/aaa/bbb'},\n              {path: '/aaa/bbb'},\n              {path: '/aaa/bbb'}\n            ]\n          },\n          {name: 'aaa'},\n          {name: 'aaa'},{name: 'aaa'},{name: 'aaa'},{name: 'aaa'}\n        ]\n      })\n    }\n  }\n\n  state = {\n    tags: [],\n    paths: {}\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <List\n          size=\"small\"\n          bordered=\"bordered\"\n          dataSource={this.state.tags}\n          renderItem={item =>\n            <UxListItem tag={item}/>\n          }\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}